# Customer Segmentation using K-Means Clustering

# Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# Load Dataset
df = pd.read_csv('online_retail.csv', encoding='unicode_escape')

# Display the first few rows
df.head()

# Data Cleaning
## Remove missing values
df.dropna(inplace=True)

## Remove duplicates
df.drop_duplicates(inplace=True)

## Filter out negative quantities
df = df[df['Quantity'] > 0]

# Exploratory Data Analysis (EDA)
## Summary statistics
df.describe()

## Visualizing the distribution of the Quantity
plt.figure(figsize=(10, 6))
sns.histplot(df['Quantity'], bins=30, kde=True)
plt.title('Distribution of Quantity')
plt.show()

# Feature Engineering
## Create Recency, Frequency, and Monetary features
snapshot_date = df['InvoiceDate'].max() + pd.Timedelta(days=1)
df['TotalPrice'] = df['Quantity'] * df['UnitPrice']
customers = df.groupby('CustomerID').agg({
    'InvoiceDate': lambda x: (snapshot_date - x.max()).days,
    'InvoiceNo': 'count',
    'TotalPrice': 'sum'
}).reset_index()
customers.columns = ['CustomerID', 'Recency', 'Frequency', 'Monetary']

# Normalize the data
scaler = StandardScaler()
customers_scaled = scaler.fit_transform(customers[['Recency', 'Frequency', 'Monetary']])

# K-Means Clustering
## Determine the optimal number of clusters using the Elbow method
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(customers_scaled)
    wcss.append(kmeans.inertia_)

plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

## Fit the KMeans model
optimal_clusters = 4  # Based on the elbow plot
kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
customers['Cluster'] = kmeans.fit_predict(customers_scaled)

# Result Visualization
## Visualizing the clusters using PCA
pca = PCA(n_components=2)
customers_pca = pca.fit_transform(customers_scaled)
customers['PCA1'] = customers_pca[:, 0]
customers['PCA2'] = customers_pca[:, 1]

plt.figure(figsize=(10, 6))
sns.scatterplot(data=customers, x='PCA1', y='PCA2', hue='Cluster', palette='viridis')
plt.title('Customer Segmentation Clusters')
plt.show()

# Insights and Recommendations
## Analyze the clusters
for i in range(optimal_clusters):
    cluster_data = customers[customers['Cluster'] == i]
    print(f'Cluster {i} - Count: {len(cluster_data)}')
    print(cluster_data[['Recency', 'Frequency', 'Monetary']].describe())
